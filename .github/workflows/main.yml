name: ðŸ”¬
on:
  push:
    branches: [default]
  pull_request:
    branches: [default]

jobs:
  install:
    name: Install
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os:
          - ubuntu-latest
          # - macos-latest
          # - windows-latest
        node-version:
          - 14.x

    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Recover cached dependencies
        id: cache-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ matrix.node-version }}-${{ runner.OS }}-build-${{ hashFiles('package.json') }}
      - name: Install dependencies
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: yarn install
      - name: Build dependencies
        run: yarn prepare

  test:
    name: Test
    needs:
      - install
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os:
          - ubuntu-latest
          # - macos-latest
          # - windows-latest
        node-version:
          - 14.x

    steps:
      ## REPEAT SAME SETUP
      ## ---------------------------------------------
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Recover cached dependencies
        id: cache-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ matrix.node-version }}-${{ runner.OS }}-build-${{ hashFiles('package.json', 'yarn.lock', 'package-lock.json') }}
      - name: Install dependencies
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: yarn install
      - name: Build dependencies
        run: yarn prepare
      ## ---------------------------------------------
      - name: Test
        run: yarn test

  type-check:
    name: Type check
    needs:
      - install
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
        project:
          - "replicator"

    steps:
      ## REPEAT SAME SETUP
      ## ---------------------------------------------
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Recover cached dependencies
        id: cache-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ matrix.node-version }}-${{ runner.OS }}-build-${{ hashFiles('package.json') }}
      - name: Install dependencies
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: yarn install
      - name: Build dependencies
        run: yarn prepare
      ## ---------------------------------------------
      - name: Type check ${{ matrix.project }}
        uses: gozala/typescript-error-reporter-action@v1.0.5
        with:
          project: ${{ matrix.project }}/tsconfig.json

  release:
    name: Release
    needs:
      - type-check
      - test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/default'
    steps:
      ## REPEAT SAME SETUP
      ## ---------------------------------------------
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Recover cached dependencies
        id: cache-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ matrix.node-version }}-${{ runner.OS }}-build-${{ hashFiles('package.json') }}
      - name: Install dependencies
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: yarn install
      - name: Build dependencies
        run: yarn prepare
      ## ---------------------------------------------
      # Pin the built site to ipfs-cluster, output the cid as `steps.ipfs.outputs.cid`
      # see: https://github.com/ipfs-shipyard/ipfs-github-action
      - name: Publish to IPFS
        id: ipfs
        uses: ipfs-shipyard/ipfs-github-action@v2.0.0
        with:
          path_to_add: replicator
          cluster_host: /dnsaddr/cluster.ipfs.io
          cluster_user: ${{ secrets.CLUSTER_USER }}
          cluster_password: ${{ secrets.CLUSTER_PASSWORD }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Print deployed CID
      - run: echo /ipfs/${{ steps.ipfs.outputs.cid }}

      # TODO
      # # This branch updates a dnslink for a domain if the current branch should be deployed to prod.
      # # see https://github.com/ipfs-shipyard/js-dnslink-dnsimple
      # - run: npx dnslink-dnsimple --domain replicator.link --link /ipfs/${{ steps.ipfs.outputs.cid }}
      #   env:
      #     DNSIMPLE_TOKEN: ${{ secrets.DNSIMPLE_TOKEN }}
      #   if: github.event_name == 'push' && github.ref == 'refs/heads/default'
